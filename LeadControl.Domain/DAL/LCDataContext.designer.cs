#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LeadControl.Domain.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LeadControl")]
	public partial class LCDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertFEAOrderItem(LeadControl.Domain.Entities.FEAOrderItem instance);
    partial void UpdateFEAOrderItem(LeadControl.Domain.Entities.FEAOrderItem instance);
    partial void DeleteFEAOrderItem(LeadControl.Domain.Entities.FEAOrderItem instance);
    partial void InsertWarehouse(LeadControl.Domain.Entities.Warehouse instance);
    partial void UpdateWarehouse(LeadControl.Domain.Entities.Warehouse instance);
    partial void DeleteWarehouse(LeadControl.Domain.Entities.Warehouse instance);
    partial void InsertFEAOrder(LeadControl.Domain.Entities.FEAOrder instance);
    partial void UpdateFEAOrder(LeadControl.Domain.Entities.FEAOrder instance);
    partial void DeleteFEAOrder(LeadControl.Domain.Entities.FEAOrder instance);
    partial void InsertFEAOrdersStatusChangement(LeadControl.Domain.Entities.FEAOrdersStatusChangement instance);
    partial void UpdateFEAOrdersStatusChangement(LeadControl.Domain.Entities.FEAOrdersStatusChangement instance);
    partial void DeleteFEAOrdersStatusChangement(LeadControl.Domain.Entities.FEAOrdersStatusChangement instance);
    partial void InsertLeadAccountInfo(LeadControl.Domain.Entities.LeadAccountInfo instance);
    partial void UpdateLeadAccountInfo(LeadControl.Domain.Entities.LeadAccountInfo instance);
    partial void DeleteLeadAccountInfo(LeadControl.Domain.Entities.LeadAccountInfo instance);
    partial void InsertLeadLegalInfo(LeadControl.Domain.Entities.LeadLegalInfo instance);
    partial void UpdateLeadLegalInfo(LeadControl.Domain.Entities.LeadLegalInfo instance);
    partial void DeleteLeadLegalInfo(LeadControl.Domain.Entities.LeadLegalInfo instance);
    partial void InsertLeadOrderDocument(LeadControl.Domain.Entities.LeadOrderDocument instance);
    partial void UpdateLeadOrderDocument(LeadControl.Domain.Entities.LeadOrderDocument instance);
    partial void DeleteLeadOrderDocument(LeadControl.Domain.Entities.LeadOrderDocument instance);
    partial void InsertLeadOrderItem(LeadControl.Domain.Entities.LeadOrderItem instance);
    partial void UpdateLeadOrderItem(LeadControl.Domain.Entities.LeadOrderItem instance);
    partial void DeleteLeadOrderItem(LeadControl.Domain.Entities.LeadOrderItem instance);
    partial void InsertLeadOrder(LeadControl.Domain.Entities.LeadOrder instance);
    partial void UpdateLeadOrder(LeadControl.Domain.Entities.LeadOrder instance);
    partial void DeleteLeadOrder(LeadControl.Domain.Entities.LeadOrder instance);
    partial void InsertLeadOrdersComment(LeadControl.Domain.Entities.LeadOrdersComment instance);
    partial void UpdateLeadOrdersComment(LeadControl.Domain.Entities.LeadOrdersComment instance);
    partial void DeleteLeadOrdersComment(LeadControl.Domain.Entities.LeadOrdersComment instance);
    partial void InsertLeadOrderStatusChangement(LeadControl.Domain.Entities.LeadOrderStatusChangement instance);
    partial void UpdateLeadOrderStatusChangement(LeadControl.Domain.Entities.LeadOrderStatusChangement instance);
    partial void DeleteLeadOrderStatusChangement(LeadControl.Domain.Entities.LeadOrderStatusChangement instance);
    partial void InsertLeadPassportInfo(LeadControl.Domain.Entities.LeadPassportInfo instance);
    partial void UpdateLeadPassportInfo(LeadControl.Domain.Entities.LeadPassportInfo instance);
    partial void DeleteLeadPassportInfo(LeadControl.Domain.Entities.LeadPassportInfo instance);
    partial void InsertLead(LeadControl.Domain.Entities.Lead instance);
    partial void UpdateLead(LeadControl.Domain.Entities.Lead instance);
    partial void DeleteLead(LeadControl.Domain.Entities.Lead instance);
    partial void InsertPermission(LeadControl.Domain.Entities.Permission instance);
    partial void UpdatePermission(LeadControl.Domain.Entities.Permission instance);
    partial void DeletePermission(LeadControl.Domain.Entities.Permission instance);
    partial void InsertProductType(LeadControl.Domain.Entities.ProductType instance);
    partial void UpdateProductType(LeadControl.Domain.Entities.ProductType instance);
    partial void DeleteProductType(LeadControl.Domain.Entities.ProductType instance);
    partial void InsertProject(LeadControl.Domain.Entities.Project instance);
    partial void UpdateProject(LeadControl.Domain.Entities.Project instance);
    partial void DeleteProject(LeadControl.Domain.Entities.Project instance);
    partial void InsertProjectUser(LeadControl.Domain.Entities.ProjectUser instance);
    partial void UpdateProjectUser(LeadControl.Domain.Entities.ProjectUser instance);
    partial void DeleteProjectUser(LeadControl.Domain.Entities.ProjectUser instance);
    partial void InsertRolePermission(LeadControl.Domain.Entities.RolePermission instance);
    partial void UpdateRolePermission(LeadControl.Domain.Entities.RolePermission instance);
    partial void DeleteRolePermission(LeadControl.Domain.Entities.RolePermission instance);
    partial void InsertRole(LeadControl.Domain.Entities.Role instance);
    partial void UpdateRole(LeadControl.Domain.Entities.Role instance);
    partial void DeleteRole(LeadControl.Domain.Entities.Role instance);
    partial void InsertUser(LeadControl.Domain.Entities.User instance);
    partial void UpdateUser(LeadControl.Domain.Entities.User instance);
    partial void DeleteUser(LeadControl.Domain.Entities.User instance);
    partial void InsertWarehouseKeeper(LeadControl.Domain.Entities.WarehouseKeeper instance);
    partial void UpdateWarehouseKeeper(LeadControl.Domain.Entities.WarehouseKeeper instance);
    partial void DeleteWarehouseKeeper(LeadControl.Domain.Entities.WarehouseKeeper instance);
    partial void InsertWarehouseProduct(LeadControl.Domain.Entities.WarehouseProduct instance);
    partial void UpdateWarehouseProduct(LeadControl.Domain.Entities.WarehouseProduct instance);
    partial void DeleteWarehouseProduct(LeadControl.Domain.Entities.WarehouseProduct instance);
    partial void InsertLeadOrderUser(LeadControl.Domain.Entities.LeadOrderUser instance);
    partial void UpdateLeadOrderUser(LeadControl.Domain.Entities.LeadOrderUser instance);
    partial void DeleteLeadOrderUser(LeadControl.Domain.Entities.LeadOrderUser instance);
    partial void InsertSMSNotificationMessage(LeadControl.Domain.Entities.SMSNotificationMessage instance);
    partial void UpdateSMSNotificationMessage(LeadControl.Domain.Entities.SMSNotificationMessage instance);
    partial void DeleteSMSNotificationMessage(LeadControl.Domain.Entities.SMSNotificationMessage instance);
    partial void InsertMailNotificationMessage(LeadControl.Domain.Entities.MailNotificationMessage instance);
    partial void UpdateMailNotificationMessage(LeadControl.Domain.Entities.MailNotificationMessage instance);
    partial void DeleteMailNotificationMessage(LeadControl.Domain.Entities.MailNotificationMessage instance);
    #endregion
		
		public LCDataContext() : 
				base(global::LeadControl.Domain.Properties.Settings.Default.LeadControlConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LCDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LCDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LCDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LCDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<LeadControl.Domain.Entities.FEAOrderItem> FEAOrderItems
		{
			get
			{
				return this.GetTable<LeadControl.Domain.Entities.FEAOrderItem>();
			}
		}
		
		public System.Data.Linq.Table<LeadControl.Domain.Entities.Warehouse> Warehouses
		{
			get
			{
				return this.GetTable<LeadControl.Domain.Entities.Warehouse>();
			}
		}
		
		public System.Data.Linq.Table<LeadControl.Domain.Entities.FEAOrder> FEAOrders
		{
			get
			{
				return this.GetTable<LeadControl.Domain.Entities.FEAOrder>();
			}
		}
		
		public System.Data.Linq.Table<LeadControl.Domain.Entities.FEAOrdersStatusChangement> FEAOrdersStatusChangements
		{
			get
			{
				return this.GetTable<LeadControl.Domain.Entities.FEAOrdersStatusChangement>();
			}
		}
		
		public System.Data.Linq.Table<LeadControl.Domain.Entities.LeadAccountInfo> LeadAccountInfos
		{
			get
			{
				return this.GetTable<LeadControl.Domain.Entities.LeadAccountInfo>();
			}
		}
		
		public System.Data.Linq.Table<LeadControl.Domain.Entities.LeadLegalInfo> LeadLegalInfos
		{
			get
			{
				return this.GetTable<LeadControl.Domain.Entities.LeadLegalInfo>();
			}
		}
		
		public System.Data.Linq.Table<LeadControl.Domain.Entities.LeadOrderDocument> LeadOrderDocuments
		{
			get
			{
				return this.GetTable<LeadControl.Domain.Entities.LeadOrderDocument>();
			}
		}
		
		public System.Data.Linq.Table<LeadControl.Domain.Entities.LeadOrderItem> LeadOrderItems
		{
			get
			{
				return this.GetTable<LeadControl.Domain.Entities.LeadOrderItem>();
			}
		}
		
		public System.Data.Linq.Table<LeadControl.Domain.Entities.LeadOrder> LeadOrders
		{
			get
			{
				return this.GetTable<LeadControl.Domain.Entities.LeadOrder>();
			}
		}
		
		public System.Data.Linq.Table<LeadControl.Domain.Entities.LeadOrdersComment> LeadOrdersComments
		{
			get
			{
				return this.GetTable<LeadControl.Domain.Entities.LeadOrdersComment>();
			}
		}
		
		public System.Data.Linq.Table<LeadControl.Domain.Entities.LeadOrderStatusChangement> LeadOrderStatusChangements
		{
			get
			{
				return this.GetTable<LeadControl.Domain.Entities.LeadOrderStatusChangement>();
			}
		}
		
		public System.Data.Linq.Table<LeadControl.Domain.Entities.LeadPassportInfo> LeadPassportInfos
		{
			get
			{
				return this.GetTable<LeadControl.Domain.Entities.LeadPassportInfo>();
			}
		}
		
		public System.Data.Linq.Table<LeadControl.Domain.Entities.Lead> Leads
		{
			get
			{
				return this.GetTable<LeadControl.Domain.Entities.Lead>();
			}
		}
		
		public System.Data.Linq.Table<LeadControl.Domain.Entities.Permission> Permissions
		{
			get
			{
				return this.GetTable<LeadControl.Domain.Entities.Permission>();
			}
		}
		
		public System.Data.Linq.Table<LeadControl.Domain.Entities.ProductType> ProductTypes
		{
			get
			{
				return this.GetTable<LeadControl.Domain.Entities.ProductType>();
			}
		}
		
		public System.Data.Linq.Table<LeadControl.Domain.Entities.Project> Projects
		{
			get
			{
				return this.GetTable<LeadControl.Domain.Entities.Project>();
			}
		}
		
		public System.Data.Linq.Table<LeadControl.Domain.Entities.ProjectUser> ProjectUsers
		{
			get
			{
				return this.GetTable<LeadControl.Domain.Entities.ProjectUser>();
			}
		}
		
		public System.Data.Linq.Table<LeadControl.Domain.Entities.RolePermission> RolePermissions
		{
			get
			{
				return this.GetTable<LeadControl.Domain.Entities.RolePermission>();
			}
		}
		
		public System.Data.Linq.Table<LeadControl.Domain.Entities.Role> Roles
		{
			get
			{
				return this.GetTable<LeadControl.Domain.Entities.Role>();
			}
		}
		
		public System.Data.Linq.Table<LeadControl.Domain.Entities.User> Users
		{
			get
			{
				return this.GetTable<LeadControl.Domain.Entities.User>();
			}
		}
		
		public System.Data.Linq.Table<LeadControl.Domain.Entities.WarehouseKeeper> WarehouseKeepers
		{
			get
			{
				return this.GetTable<LeadControl.Domain.Entities.WarehouseKeeper>();
			}
		}
		
		public System.Data.Linq.Table<LeadControl.Domain.Entities.WarehouseProduct> WarehouseProducts
		{
			get
			{
				return this.GetTable<LeadControl.Domain.Entities.WarehouseProduct>();
			}
		}
		
		public System.Data.Linq.Table<LeadControl.Domain.Entities.LeadOrderUser> LeadOrderUsers
		{
			get
			{
				return this.GetTable<LeadControl.Domain.Entities.LeadOrderUser>();
			}
		}
		
		public System.Data.Linq.Table<LeadControl.Domain.Entities.SMSNotificationMessage> SMSNotificationMessages
		{
			get
			{
				return this.GetTable<LeadControl.Domain.Entities.SMSNotificationMessage>();
			}
		}
		
		public System.Data.Linq.Table<LeadControl.Domain.Entities.MailNotificationMessage> MailNotificationMessages
		{
			get
			{
				return this.GetTable<LeadControl.Domain.Entities.MailNotificationMessage>();
			}
		}
	}
}
namespace LeadControl.Domain.Entities
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FEAOrderItems")]
	public partial class FEAOrderItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _FEAOrderId;
		
		private long _ProductId;
		
		private int _Quantity;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private EntityRef<FEAOrder> _FEAOrder;
		
		private EntityRef<ProductType> _ProductType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnFEAOrderIdChanging(long value);
    partial void OnFEAOrderIdChanged();
    partial void OnProductIdChanging(long value);
    partial void OnProductIdChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public FEAOrderItem()
		{
			this._FEAOrder = default(EntityRef<FEAOrder>);
			this._ProductType = default(EntityRef<ProductType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FEAOrderId", DbType="BigInt NOT NULL")]
		public long FEAOrderId
		{
			get
			{
				return this._FEAOrderId;
			}
			set
			{
				if ((this._FEAOrderId != value))
				{
					if (this._FEAOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFEAOrderIdChanging(value);
					this.SendPropertyChanging();
					this._FEAOrderId = value;
					this.SendPropertyChanged("FEAOrderId");
					this.OnFEAOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="BigInt NOT NULL")]
		public long ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._ProductType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FEAOrder_FEAOrderItem", Storage="_FEAOrder", ThisKey="FEAOrderId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public FEAOrder FEAOrder
		{
			get
			{
				return this._FEAOrder.Entity;
			}
			set
			{
				FEAOrder previousValue = this._FEAOrder.Entity;
				if (((previousValue != value) 
							|| (this._FEAOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FEAOrder.Entity = null;
						previousValue.FEAOrderItems.Remove(this);
					}
					this._FEAOrder.Entity = value;
					if ((value != null))
					{
						value.FEAOrderItems.Add(this);
						this._FEAOrderId = value.Id;
					}
					else
					{
						this._FEAOrderId = default(long);
					}
					this.SendPropertyChanged("FEAOrder");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductType_FEAOrderItem", Storage="_ProductType", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
		public ProductType ProductType
		{
			get
			{
				return this._ProductType.Entity;
			}
			set
			{
				ProductType previousValue = this._ProductType.Entity;
				if (((previousValue != value) 
							|| (this._ProductType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductType.Entity = null;
						previousValue.FEAOrderItems.Remove(this);
					}
					this._ProductType.Entity = value;
					if ((value != null))
					{
						value.FEAOrderItems.Add(this);
						this._ProductId = value.Id;
					}
					else
					{
						this._ProductId = default(long);
					}
					this.SendPropertyChanged("ProductType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Warehouses")]
	public partial class Warehouse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _ProjectId;
		
		private string _Title;
		
		private string _Description;
		
		private string _City;
		
		private string _Address;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private System.Nullable<System.DateTime> _DateModified;
		
		private EntitySet<FEAOrder> _FEAOrders;
		
		private EntitySet<WarehouseKeeper> _WarehouseKeepers;
		
		private EntitySet<WarehouseProduct> _WarehouseProducts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnProjectIdChanging(long value);
    partial void OnProjectIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public Warehouse()
		{
			this._FEAOrders = new EntitySet<FEAOrder>(new Action<FEAOrder>(this.attach_FEAOrders), new Action<FEAOrder>(this.detach_FEAOrders));
			this._WarehouseKeepers = new EntitySet<WarehouseKeeper>(new Action<WarehouseKeeper>(this.attach_WarehouseKeepers), new Action<WarehouseKeeper>(this.detach_WarehouseKeepers));
			this._WarehouseProducts = new EntitySet<WarehouseProduct>(new Action<WarehouseProduct>(this.attach_WarehouseProducts), new Action<WarehouseProduct>(this.detach_WarehouseProducts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="BigInt NOT NULL")]
		public long ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(255)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Warehouse_FEAOrder", Storage="_FEAOrders", ThisKey="Id", OtherKey="TargetWarehouseId")]
		public EntitySet<FEAOrder> FEAOrders
		{
			get
			{
				return this._FEAOrders;
			}
			set
			{
				this._FEAOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Warehouse_WarehouseKeeper", Storage="_WarehouseKeepers", ThisKey="Id", OtherKey="WarehouseId")]
		public EntitySet<WarehouseKeeper> WarehouseKeepers
		{
			get
			{
				return this._WarehouseKeepers;
			}
			set
			{
				this._WarehouseKeepers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Warehouse_WarehouseProduct", Storage="_WarehouseProducts", ThisKey="Id", OtherKey="WarehouseId")]
		public EntitySet<WarehouseProduct> WarehouseProducts
		{
			get
			{
				return this._WarehouseProducts;
			}
			set
			{
				this._WarehouseProducts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FEAOrders(FEAOrder entity)
		{
			this.SendPropertyChanging();
			entity.Warehouse = this;
		}
		
		private void detach_FEAOrders(FEAOrder entity)
		{
			this.SendPropertyChanging();
			entity.Warehouse = null;
		}
		
		private void attach_WarehouseKeepers(WarehouseKeeper entity)
		{
			this.SendPropertyChanging();
			entity.Warehouse = this;
		}
		
		private void detach_WarehouseKeepers(WarehouseKeeper entity)
		{
			this.SendPropertyChanging();
			entity.Warehouse = null;
		}
		
		private void attach_WarehouseProducts(WarehouseProduct entity)
		{
			this.SendPropertyChanging();
			entity.Warehouse = this;
		}
		
		private void detach_WarehouseProducts(WarehouseProduct entity)
		{
			this.SendPropertyChanging();
			entity.Warehouse = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FEAOrders")]
	public partial class FEAOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _ProjectId;
		
		private short _Status;
		
		private long _TargetWarehouseId;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private EntitySet<FEAOrderItem> _FEAOrderItems;
		
		private EntitySet<FEAOrdersStatusChangement> _FEAOrdersStatusChangements;
		
		private EntityRef<Warehouse> _Warehouse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnProjectIdChanging(long value);
    partial void OnProjectIdChanged();
    partial void OnStatusChanging(short value);
    partial void OnStatusChanged();
    partial void OnTargetWarehouseIdChanging(long value);
    partial void OnTargetWarehouseIdChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public FEAOrder()
		{
			this._FEAOrderItems = new EntitySet<FEAOrderItem>(new Action<FEAOrderItem>(this.attach_FEAOrderItems), new Action<FEAOrderItem>(this.detach_FEAOrderItems));
			this._FEAOrdersStatusChangements = new EntitySet<FEAOrdersStatusChangement>(new Action<FEAOrdersStatusChangement>(this.attach_FEAOrdersStatusChangements), new Action<FEAOrdersStatusChangement>(this.detach_FEAOrdersStatusChangements));
			this._Warehouse = default(EntityRef<Warehouse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="BigInt NOT NULL")]
		public long ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="SmallInt NOT NULL")]
		public short Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetWarehouseId", DbType="BigInt NOT NULL")]
		public long TargetWarehouseId
		{
			get
			{
				return this._TargetWarehouseId;
			}
			set
			{
				if ((this._TargetWarehouseId != value))
				{
					if (this._Warehouse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTargetWarehouseIdChanging(value);
					this.SendPropertyChanging();
					this._TargetWarehouseId = value;
					this.SendPropertyChanged("TargetWarehouseId");
					this.OnTargetWarehouseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FEAOrder_FEAOrderItem", Storage="_FEAOrderItems", ThisKey="Id", OtherKey="FEAOrderId")]
		public EntitySet<FEAOrderItem> FEAOrderItems
		{
			get
			{
				return this._FEAOrderItems;
			}
			set
			{
				this._FEAOrderItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FEAOrder_FEAOrdersStatusChangement", Storage="_FEAOrdersStatusChangements", ThisKey="Id", OtherKey="FEAOrderId")]
		public EntitySet<FEAOrdersStatusChangement> FEAOrdersStatusChangements
		{
			get
			{
				return this._FEAOrdersStatusChangements;
			}
			set
			{
				this._FEAOrdersStatusChangements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Warehouse_FEAOrder", Storage="_Warehouse", ThisKey="TargetWarehouseId", OtherKey="Id", IsForeignKey=true)]
		public Warehouse Warehouse
		{
			get
			{
				return this._Warehouse.Entity;
			}
			set
			{
				Warehouse previousValue = this._Warehouse.Entity;
				if (((previousValue != value) 
							|| (this._Warehouse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Warehouse.Entity = null;
						previousValue.FEAOrders.Remove(this);
					}
					this._Warehouse.Entity = value;
					if ((value != null))
					{
						value.FEAOrders.Add(this);
						this._TargetWarehouseId = value.Id;
					}
					else
					{
						this._TargetWarehouseId = default(long);
					}
					this.SendPropertyChanged("Warehouse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FEAOrderItems(FEAOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.FEAOrder = this;
		}
		
		private void detach_FEAOrderItems(FEAOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.FEAOrder = null;
		}
		
		private void attach_FEAOrdersStatusChangements(FEAOrdersStatusChangement entity)
		{
			this.SendPropertyChanging();
			entity.FEAOrder = this;
		}
		
		private void detach_FEAOrdersStatusChangements(FEAOrdersStatusChangement entity)
		{
			this.SendPropertyChanging();
			entity.FEAOrder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FEAOrdersStatusChangements")]
	public partial class FEAOrdersStatusChangement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _FEAOrderId;
		
		private long _AuthorId;
		
		private short _Status;
		
		private string _Comments;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private EntityRef<FEAOrder> _FEAOrder;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnFEAOrderIdChanging(long value);
    partial void OnFEAOrderIdChanged();
    partial void OnAuthorIdChanging(long value);
    partial void OnAuthorIdChanged();
    partial void OnStatusChanging(short value);
    partial void OnStatusChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public FEAOrdersStatusChangement()
		{
			this._FEAOrder = default(EntityRef<FEAOrder>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FEAOrderId", DbType="BigInt NOT NULL")]
		public long FEAOrderId
		{
			get
			{
				return this._FEAOrderId;
			}
			set
			{
				if ((this._FEAOrderId != value))
				{
					if (this._FEAOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFEAOrderIdChanging(value);
					this.SendPropertyChanging();
					this._FEAOrderId = value;
					this.SendPropertyChanged("FEAOrderId");
					this.OnFEAOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorId", DbType="BigInt NOT NULL")]
		public long AuthorId
		{
			get
			{
				return this._AuthorId;
			}
			set
			{
				if ((this._AuthorId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorId = value;
					this.SendPropertyChanged("AuthorId");
					this.OnAuthorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="SmallInt NOT NULL")]
		public short Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="NVarChar(255)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FEAOrder_FEAOrdersStatusChangement", Storage="_FEAOrder", ThisKey="FEAOrderId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public FEAOrder FEAOrder
		{
			get
			{
				return this._FEAOrder.Entity;
			}
			set
			{
				FEAOrder previousValue = this._FEAOrder.Entity;
				if (((previousValue != value) 
							|| (this._FEAOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FEAOrder.Entity = null;
						previousValue.FEAOrdersStatusChangements.Remove(this);
					}
					this._FEAOrder.Entity = value;
					if ((value != null))
					{
						value.FEAOrdersStatusChangements.Add(this);
						this._FEAOrderId = value.Id;
					}
					else
					{
						this._FEAOrderId = default(long);
					}
					this.SendPropertyChanged("FEAOrder");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_FEAOrdersStatusChangement", Storage="_User", ThisKey="AuthorId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.FEAOrdersStatusChangements.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.FEAOrdersStatusChangements.Add(this);
						this._AuthorId = value.Id;
					}
					else
					{
						this._AuthorId = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LeadAccountInfo")]
	public partial class LeadAccountInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _LeadId;
		
		private string _Number;
		
		private string _BankName;
		
		private string _BIK;
		
		private string _KNumber;
		
		private EntityRef<Lead> _Lead;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnLeadIdChanging(long value);
    partial void OnLeadIdChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnBankNameChanging(string value);
    partial void OnBankNameChanged();
    partial void OnBIKChanging(string value);
    partial void OnBIKChanged();
    partial void OnKNumberChanging(string value);
    partial void OnKNumberChanged();
    #endregion
		
		public LeadAccountInfo()
		{
			this._Lead = default(EntityRef<Lead>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeadId", DbType="BigInt NOT NULL")]
		public long LeadId
		{
			get
			{
				return this._LeadId;
			}
			set
			{
				if ((this._LeadId != value))
				{
					if (this._Lead.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeadIdChanging(value);
					this.SendPropertyChanging();
					this._LeadId = value;
					this.SendPropertyChanged("LeadId");
					this.OnLeadIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(MAX)")]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankName", DbType="NVarChar(MAX)")]
		public string BankName
		{
			get
			{
				return this._BankName;
			}
			set
			{
				if ((this._BankName != value))
				{
					this.OnBankNameChanging(value);
					this.SendPropertyChanging();
					this._BankName = value;
					this.SendPropertyChanged("BankName");
					this.OnBankNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BIK", DbType="NVarChar(MAX)")]
		public string BIK
		{
			get
			{
				return this._BIK;
			}
			set
			{
				if ((this._BIK != value))
				{
					this.OnBIKChanging(value);
					this.SendPropertyChanging();
					this._BIK = value;
					this.SendPropertyChanged("BIK");
					this.OnBIKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KNumber", DbType="NVarChar(MAX)")]
		public string KNumber
		{
			get
			{
				return this._KNumber;
			}
			set
			{
				if ((this._KNumber != value))
				{
					this.OnKNumberChanging(value);
					this.SendPropertyChanging();
					this._KNumber = value;
					this.SendPropertyChanged("KNumber");
					this.OnKNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lead_LeadAccountInfo", Storage="_Lead", ThisKey="LeadId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Lead Lead
		{
			get
			{
				return this._Lead.Entity;
			}
			set
			{
				Lead previousValue = this._Lead.Entity;
				if (((previousValue != value) 
							|| (this._Lead.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lead.Entity = null;
						previousValue.LeadAccountInfos = null;
					}
					this._Lead.Entity = value;
					if ((value != null))
					{
						value.LeadAccountInfos = this;
						this._LeadId = value.Id;
					}
					else
					{
						this._LeadId = default(long);
					}
					this.SendPropertyChanged("Lead");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LeadLegalInfo")]
	public partial class LeadLegalInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _LeadId;
		
		private short _LegalType;
		
		private string _CompanyName;
		
		private string _INN;
		
		private string _OGRN;
		
		private string _KPP;
		
		private string _OKPO;
		
		private string _LegalAddress;
		
		private string _FacticalAddress;
		
		private string _DirectorFIO;
		
		private EntityRef<Lead> _Lead;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnLeadIdChanging(long value);
    partial void OnLeadIdChanged();
    partial void OnLegalTypeChanging(short value);
    partial void OnLegalTypeChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnINNChanging(string value);
    partial void OnINNChanged();
    partial void OnOGRNChanging(string value);
    partial void OnOGRNChanged();
    partial void OnKPPChanging(string value);
    partial void OnKPPChanged();
    partial void OnOKPOChanging(string value);
    partial void OnOKPOChanged();
    partial void OnLegalAddressChanging(string value);
    partial void OnLegalAddressChanged();
    partial void OnFacticalAddressChanging(string value);
    partial void OnFacticalAddressChanged();
    partial void OnDirectorFIOChanging(string value);
    partial void OnDirectorFIOChanged();
    #endregion
		
		public LeadLegalInfo()
		{
			this._Lead = default(EntityRef<Lead>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeadId", DbType="BigInt NOT NULL")]
		public long LeadId
		{
			get
			{
				return this._LeadId;
			}
			set
			{
				if ((this._LeadId != value))
				{
					if (this._Lead.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeadIdChanging(value);
					this.SendPropertyChanging();
					this._LeadId = value;
					this.SendPropertyChanged("LeadId");
					this.OnLeadIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LegalType", DbType="SmallInt NOT NULL")]
		public short LegalType
		{
			get
			{
				return this._LegalType;
			}
			set
			{
				if ((this._LegalType != value))
				{
					this.OnLegalTypeChanging(value);
					this.SendPropertyChanging();
					this._LegalType = value;
					this.SendPropertyChanged("LegalType");
					this.OnLegalTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="NVarChar(255)")]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_INN", DbType="NVarChar(50)")]
		public string INN
		{
			get
			{
				return this._INN;
			}
			set
			{
				if ((this._INN != value))
				{
					this.OnINNChanging(value);
					this.SendPropertyChanging();
					this._INN = value;
					this.SendPropertyChanged("INN");
					this.OnINNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OGRN", DbType="NVarChar(50)")]
		public string OGRN
		{
			get
			{
				return this._OGRN;
			}
			set
			{
				if ((this._OGRN != value))
				{
					this.OnOGRNChanging(value);
					this.SendPropertyChanging();
					this._OGRN = value;
					this.SendPropertyChanged("OGRN");
					this.OnOGRNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KPP", DbType="NVarChar(50)")]
		public string KPP
		{
			get
			{
				return this._KPP;
			}
			set
			{
				if ((this._KPP != value))
				{
					this.OnKPPChanging(value);
					this.SendPropertyChanging();
					this._KPP = value;
					this.SendPropertyChanged("KPP");
					this.OnKPPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OKPO", DbType="NVarChar(50)")]
		public string OKPO
		{
			get
			{
				return this._OKPO;
			}
			set
			{
				if ((this._OKPO != value))
				{
					this.OnOKPOChanging(value);
					this.SendPropertyChanging();
					this._OKPO = value;
					this.SendPropertyChanged("OKPO");
					this.OnOKPOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LegalAddress", DbType="NVarChar(MAX)")]
		public string LegalAddress
		{
			get
			{
				return this._LegalAddress;
			}
			set
			{
				if ((this._LegalAddress != value))
				{
					this.OnLegalAddressChanging(value);
					this.SendPropertyChanging();
					this._LegalAddress = value;
					this.SendPropertyChanged("LegalAddress");
					this.OnLegalAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacticalAddress", DbType="NVarChar(MAX)")]
		public string FacticalAddress
		{
			get
			{
				return this._FacticalAddress;
			}
			set
			{
				if ((this._FacticalAddress != value))
				{
					this.OnFacticalAddressChanging(value);
					this.SendPropertyChanging();
					this._FacticalAddress = value;
					this.SendPropertyChanged("FacticalAddress");
					this.OnFacticalAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirectorFIO", DbType="NVarChar(MAX)")]
		public string DirectorFIO
		{
			get
			{
				return this._DirectorFIO;
			}
			set
			{
				if ((this._DirectorFIO != value))
				{
					this.OnDirectorFIOChanging(value);
					this.SendPropertyChanging();
					this._DirectorFIO = value;
					this.SendPropertyChanged("DirectorFIO");
					this.OnDirectorFIOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lead_LeadLegalInfo", Storage="_Lead", ThisKey="LeadId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Lead Lead
		{
			get
			{
				return this._Lead.Entity;
			}
			set
			{
				Lead previousValue = this._Lead.Entity;
				if (((previousValue != value) 
							|| (this._Lead.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lead.Entity = null;
						previousValue.LeadLegalInfos = null;
					}
					this._Lead.Entity = value;
					if ((value != null))
					{
						value.LeadLegalInfos = this;
						this._LeadId = value.Id;
					}
					else
					{
						this._LeadId = default(long);
					}
					this.SendPropertyChanged("Lead");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LeadOrderDocuments")]
	public partial class LeadOrderDocument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _OrderId;
		
		private short _DocumentType;
		
		private string _ServerFilename;
		
		private long _Size;
		
		private string _MimeType;
		
		private System.Nullable<System.DateTime> _DateUploaded;
		
		private long _UploadedBy;
		
		private EntityRef<LeadOrder> _LeadOrder;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnOrderIdChanging(long value);
    partial void OnOrderIdChanged();
    partial void OnDocumentTypeChanging(short value);
    partial void OnDocumentTypeChanged();
    partial void OnServerFilenameChanging(string value);
    partial void OnServerFilenameChanged();
    partial void OnSizeChanging(long value);
    partial void OnSizeChanged();
    partial void OnMimeTypeChanging(string value);
    partial void OnMimeTypeChanged();
    partial void OnDateUploadedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUploadedChanged();
    partial void OnUploadedByChanging(long value);
    partial void OnUploadedByChanged();
    #endregion
		
		public LeadOrderDocument()
		{
			this._LeadOrder = default(EntityRef<LeadOrder>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="BigInt NOT NULL")]
		public long OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					if (this._LeadOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentType", DbType="SmallInt NOT NULL")]
		public short DocumentType
		{
			get
			{
				return this._DocumentType;
			}
			set
			{
				if ((this._DocumentType != value))
				{
					this.OnDocumentTypeChanging(value);
					this.SendPropertyChanging();
					this._DocumentType = value;
					this.SendPropertyChanged("DocumentType");
					this.OnDocumentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerFilename", DbType="NVarChar(MAX)")]
		public string ServerFilename
		{
			get
			{
				return this._ServerFilename;
			}
			set
			{
				if ((this._ServerFilename != value))
				{
					this.OnServerFilenameChanging(value);
					this.SendPropertyChanging();
					this._ServerFilename = value;
					this.SendPropertyChanged("ServerFilename");
					this.OnServerFilenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="BigInt NOT NULL")]
		public long Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MimeType", DbType="NVarChar(MAX)")]
		public string MimeType
		{
			get
			{
				return this._MimeType;
			}
			set
			{
				if ((this._MimeType != value))
				{
					this.OnMimeTypeChanging(value);
					this.SendPropertyChanging();
					this._MimeType = value;
					this.SendPropertyChanged("MimeType");
					this.OnMimeTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUploaded", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUploaded
		{
			get
			{
				return this._DateUploaded;
			}
			set
			{
				if ((this._DateUploaded != value))
				{
					this.OnDateUploadedChanging(value);
					this.SendPropertyChanging();
					this._DateUploaded = value;
					this.SendPropertyChanged("DateUploaded");
					this.OnDateUploadedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UploadedBy", DbType="BigInt NOT NULL")]
		public long UploadedBy
		{
			get
			{
				return this._UploadedBy;
			}
			set
			{
				if ((this._UploadedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUploadedByChanging(value);
					this.SendPropertyChanging();
					this._UploadedBy = value;
					this.SendPropertyChanged("UploadedBy");
					this.OnUploadedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeadOrder_LeadOrderDocument", Storage="_LeadOrder", ThisKey="OrderId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LeadOrder LeadOrder
		{
			get
			{
				return this._LeadOrder.Entity;
			}
			set
			{
				LeadOrder previousValue = this._LeadOrder.Entity;
				if (((previousValue != value) 
							|| (this._LeadOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeadOrder.Entity = null;
						previousValue.LeadOrderDocuments.Remove(this);
					}
					this._LeadOrder.Entity = value;
					if ((value != null))
					{
						value.LeadOrderDocuments.Add(this);
						this._OrderId = value.Id;
					}
					else
					{
						this._OrderId = default(long);
					}
					this.SendPropertyChanged("LeadOrder");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LeadOrderDocument", Storage="_User", ThisKey="UploadedBy", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.LeadOrderDocuments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.LeadOrderDocuments.Add(this);
						this._UploadedBy = value.Id;
					}
					else
					{
						this._UploadedBy = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LeadOrderItems")]
	public partial class LeadOrderItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _OrderId;
		
		private long _ProductId;
		
		private int _Quantity;
		
		private decimal _Price;
		
		private string _Comments;
		
		private EntityRef<LeadOrder> _LeadOrder;
		
		private EntityRef<ProductType> _ProductType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnOrderIdChanging(long value);
    partial void OnOrderIdChanged();
    partial void OnProductIdChanging(long value);
    partial void OnProductIdChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    #endregion
		
		public LeadOrderItem()
		{
			this._LeadOrder = default(EntityRef<LeadOrder>);
			this._ProductType = default(EntityRef<ProductType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="BigInt NOT NULL")]
		public long OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					if (this._LeadOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="BigInt NOT NULL")]
		public long ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._ProductType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="NVarChar(255)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeadOrder_LeadOrderItem", Storage="_LeadOrder", ThisKey="OrderId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LeadOrder LeadOrder
		{
			get
			{
				return this._LeadOrder.Entity;
			}
			set
			{
				LeadOrder previousValue = this._LeadOrder.Entity;
				if (((previousValue != value) 
							|| (this._LeadOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeadOrder.Entity = null;
						previousValue.LeadOrderItems.Remove(this);
					}
					this._LeadOrder.Entity = value;
					if ((value != null))
					{
						value.LeadOrderItems.Add(this);
						this._OrderId = value.Id;
					}
					else
					{
						this._OrderId = default(long);
					}
					this.SendPropertyChanged("LeadOrder");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductType_LeadOrderItem", Storage="_ProductType", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
		public ProductType ProductType
		{
			get
			{
				return this._ProductType.Entity;
			}
			set
			{
				ProductType previousValue = this._ProductType.Entity;
				if (((previousValue != value) 
							|| (this._ProductType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductType.Entity = null;
						previousValue.LeadOrderItems.Remove(this);
					}
					this._ProductType.Entity = value;
					if ((value != null))
					{
						value.LeadOrderItems.Add(this);
						this._ProductId = value.Id;
					}
					else
					{
						this._ProductId = default(long);
					}
					this.SendPropertyChanged("ProductType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LeadOrders")]
	public partial class LeadOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _LeadId;
		
		private long _ProjectId;
		
		private short _Status;
		
		private string _DeliveryAddress;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private EntitySet<LeadOrderDocument> _LeadOrderDocuments;
		
		private EntitySet<LeadOrderItem> _LeadOrderItems;
		
		private EntitySet<LeadOrdersComment> _LeadOrdersComments;
		
		private EntitySet<LeadOrderStatusChangement> _LeadOrderStatusChangements;
		
		private EntitySet<LeadOrderUser> _LeadOrderUsers;
		
		private EntityRef<Lead> _Lead;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnLeadIdChanging(long value);
    partial void OnLeadIdChanged();
    partial void OnProjectIdChanging(long value);
    partial void OnProjectIdChanged();
    partial void OnStatusChanging(short value);
    partial void OnStatusChanged();
    partial void OnDeliveryAddressChanging(string value);
    partial void OnDeliveryAddressChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public LeadOrder()
		{
			this._LeadOrderDocuments = new EntitySet<LeadOrderDocument>(new Action<LeadOrderDocument>(this.attach_LeadOrderDocuments), new Action<LeadOrderDocument>(this.detach_LeadOrderDocuments));
			this._LeadOrderItems = new EntitySet<LeadOrderItem>(new Action<LeadOrderItem>(this.attach_LeadOrderItems), new Action<LeadOrderItem>(this.detach_LeadOrderItems));
			this._LeadOrdersComments = new EntitySet<LeadOrdersComment>(new Action<LeadOrdersComment>(this.attach_LeadOrdersComments), new Action<LeadOrdersComment>(this.detach_LeadOrdersComments));
			this._LeadOrderStatusChangements = new EntitySet<LeadOrderStatusChangement>(new Action<LeadOrderStatusChangement>(this.attach_LeadOrderStatusChangements), new Action<LeadOrderStatusChangement>(this.detach_LeadOrderStatusChangements));
			this._LeadOrderUsers = new EntitySet<LeadOrderUser>(new Action<LeadOrderUser>(this.attach_LeadOrderUsers), new Action<LeadOrderUser>(this.detach_LeadOrderUsers));
			this._Lead = default(EntityRef<Lead>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeadId", DbType="BigInt NOT NULL")]
		public long LeadId
		{
			get
			{
				return this._LeadId;
			}
			set
			{
				if ((this._LeadId != value))
				{
					if (this._Lead.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeadIdChanging(value);
					this.SendPropertyChanging();
					this._LeadId = value;
					this.SendPropertyChanged("LeadId");
					this.OnLeadIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="BigInt NOT NULL")]
		public long ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="SmallInt NOT NULL")]
		public short Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryAddress", DbType="NVarChar(MAX)")]
		public string DeliveryAddress
		{
			get
			{
				return this._DeliveryAddress;
			}
			set
			{
				if ((this._DeliveryAddress != value))
				{
					this.OnDeliveryAddressChanging(value);
					this.SendPropertyChanging();
					this._DeliveryAddress = value;
					this.SendPropertyChanged("DeliveryAddress");
					this.OnDeliveryAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeadOrder_LeadOrderDocument", Storage="_LeadOrderDocuments", ThisKey="Id", OtherKey="OrderId")]
		public EntitySet<LeadOrderDocument> LeadOrderDocuments
		{
			get
			{
				return this._LeadOrderDocuments;
			}
			set
			{
				this._LeadOrderDocuments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeadOrder_LeadOrderItem", Storage="_LeadOrderItems", ThisKey="Id", OtherKey="OrderId")]
		public EntitySet<LeadOrderItem> LeadOrderItems
		{
			get
			{
				return this._LeadOrderItems;
			}
			set
			{
				this._LeadOrderItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeadOrder_LeadOrdersComment", Storage="_LeadOrdersComments", ThisKey="Id", OtherKey="OrderId")]
		public EntitySet<LeadOrdersComment> LeadOrdersComments
		{
			get
			{
				return this._LeadOrdersComments;
			}
			set
			{
				this._LeadOrdersComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeadOrder_LeadOrderStatusChangement", Storage="_LeadOrderStatusChangements", ThisKey="Id", OtherKey="OrderId")]
		public EntitySet<LeadOrderStatusChangement> LeadOrderStatusChangements
		{
			get
			{
				return this._LeadOrderStatusChangements;
			}
			set
			{
				this._LeadOrderStatusChangements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeadOrder_LeadOrderUser", Storage="_LeadOrderUsers", ThisKey="Id", OtherKey="OrderId")]
		public EntitySet<LeadOrderUser> LeadOrderUsers
		{
			get
			{
				return this._LeadOrderUsers;
			}
			set
			{
				this._LeadOrderUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lead_LeadOrder", Storage="_Lead", ThisKey="LeadId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Lead Lead
		{
			get
			{
				return this._Lead.Entity;
			}
			set
			{
				Lead previousValue = this._Lead.Entity;
				if (((previousValue != value) 
							|| (this._Lead.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lead.Entity = null;
						previousValue.LeadOrders.Remove(this);
					}
					this._Lead.Entity = value;
					if ((value != null))
					{
						value.LeadOrders.Add(this);
						this._LeadId = value.Id;
					}
					else
					{
						this._LeadId = default(long);
					}
					this.SendPropertyChanged("Lead");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_LeadOrder", Storage="_Project", ThisKey="ProjectId", OtherKey="Id", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.LeadOrders.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.LeadOrders.Add(this);
						this._ProjectId = value.Id;
					}
					else
					{
						this._ProjectId = default(long);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LeadOrderDocuments(LeadOrderDocument entity)
		{
			this.SendPropertyChanging();
			entity.LeadOrder = this;
		}
		
		private void detach_LeadOrderDocuments(LeadOrderDocument entity)
		{
			this.SendPropertyChanging();
			entity.LeadOrder = null;
		}
		
		private void attach_LeadOrderItems(LeadOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.LeadOrder = this;
		}
		
		private void detach_LeadOrderItems(LeadOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.LeadOrder = null;
		}
		
		private void attach_LeadOrdersComments(LeadOrdersComment entity)
		{
			this.SendPropertyChanging();
			entity.LeadOrder = this;
		}
		
		private void detach_LeadOrdersComments(LeadOrdersComment entity)
		{
			this.SendPropertyChanging();
			entity.LeadOrder = null;
		}
		
		private void attach_LeadOrderStatusChangements(LeadOrderStatusChangement entity)
		{
			this.SendPropertyChanging();
			entity.LeadOrder = this;
		}
		
		private void detach_LeadOrderStatusChangements(LeadOrderStatusChangement entity)
		{
			this.SendPropertyChanging();
			entity.LeadOrder = null;
		}
		
		private void attach_LeadOrderUsers(LeadOrderUser entity)
		{
			this.SendPropertyChanging();
			entity.LeadOrder = this;
		}
		
		private void detach_LeadOrderUsers(LeadOrderUser entity)
		{
			this.SendPropertyChanging();
			entity.LeadOrder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LeadOrdersComments")]
	public partial class LeadOrdersComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _OrderId;
		
		private long _AuthorId;
		
		private string _Comments;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private EntityRef<LeadOrder> _LeadOrder;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnOrderIdChanging(long value);
    partial void OnOrderIdChanged();
    partial void OnAuthorIdChanging(long value);
    partial void OnAuthorIdChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public LeadOrdersComment()
		{
			this._LeadOrder = default(EntityRef<LeadOrder>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="BigInt NOT NULL")]
		public long OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					if ((this._LeadOrder.HasLoadedOrAssignedValue || this._User.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorId", DbType="BigInt NOT NULL")]
		public long AuthorId
		{
			get
			{
				return this._AuthorId;
			}
			set
			{
				if ((this._AuthorId != value))
				{
					this.OnAuthorIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorId = value;
					this.SendPropertyChanged("AuthorId");
					this.OnAuthorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="NVarChar(MAX)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeadOrder_LeadOrdersComment", Storage="_LeadOrder", ThisKey="OrderId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LeadOrder LeadOrder
		{
			get
			{
				return this._LeadOrder.Entity;
			}
			set
			{
				LeadOrder previousValue = this._LeadOrder.Entity;
				if (((previousValue != value) 
							|| (this._LeadOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeadOrder.Entity = null;
						previousValue.LeadOrdersComments.Remove(this);
					}
					this._LeadOrder.Entity = value;
					if ((value != null))
					{
						value.LeadOrdersComments.Add(this);
						this._OrderId = value.Id;
					}
					else
					{
						this._OrderId = default(long);
					}
					this.SendPropertyChanged("LeadOrder");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LeadOrdersComment", Storage="_User", ThisKey="OrderId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.LeadOrdersComments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.LeadOrdersComments.Add(this);
						this._OrderId = value.Id;
					}
					else
					{
						this._OrderId = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LeadOrderStatusChangements")]
	public partial class LeadOrderStatusChangement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _OrderId;
		
		private long _AuthorId;
		
		private short _Status;
		
		private string _Comments;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private EntityRef<LeadOrder> _LeadOrder;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnOrderIdChanging(long value);
    partial void OnOrderIdChanged();
    partial void OnAuthorIdChanging(long value);
    partial void OnAuthorIdChanged();
    partial void OnStatusChanging(short value);
    partial void OnStatusChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public LeadOrderStatusChangement()
		{
			this._LeadOrder = default(EntityRef<LeadOrder>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="BigInt NOT NULL")]
		public long OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					if (this._LeadOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorId", DbType="BigInt NOT NULL")]
		public long AuthorId
		{
			get
			{
				return this._AuthorId;
			}
			set
			{
				if ((this._AuthorId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorId = value;
					this.SendPropertyChanged("AuthorId");
					this.OnAuthorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="SmallInt NOT NULL")]
		public short Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="NVarChar(255)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeadOrder_LeadOrderStatusChangement", Storage="_LeadOrder", ThisKey="OrderId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LeadOrder LeadOrder
		{
			get
			{
				return this._LeadOrder.Entity;
			}
			set
			{
				LeadOrder previousValue = this._LeadOrder.Entity;
				if (((previousValue != value) 
							|| (this._LeadOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeadOrder.Entity = null;
						previousValue.LeadOrderStatusChangements.Remove(this);
					}
					this._LeadOrder.Entity = value;
					if ((value != null))
					{
						value.LeadOrderStatusChangements.Add(this);
						this._OrderId = value.Id;
					}
					else
					{
						this._OrderId = default(long);
					}
					this.SendPropertyChanged("LeadOrder");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LeadOrderStatusChangement", Storage="_User", ThisKey="AuthorId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.LeadOrderStatusChangements.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.LeadOrderStatusChangements.Add(this);
						this._AuthorId = value.Id;
					}
					else
					{
						this._AuthorId = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LeadPassportInfo")]
	public partial class LeadPassportInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _LeadId;
		
		private string _Series;
		
		private string _Number;
		
		private string _IssuedBy;
		
		private System.DateTime _IssueDate;
		
		private string _DivisionCode;
		
		private EntityRef<Lead> _Lead;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnLeadIdChanging(long value);
    partial void OnLeadIdChanged();
    partial void OnSeriesChanging(string value);
    partial void OnSeriesChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnIssuedByChanging(string value);
    partial void OnIssuedByChanged();
    partial void OnIssueDateChanging(System.DateTime value);
    partial void OnIssueDateChanged();
    partial void OnDivisionCodeChanging(string value);
    partial void OnDivisionCodeChanged();
    #endregion
		
		public LeadPassportInfo()
		{
			this._Lead = default(EntityRef<Lead>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeadId", DbType="BigInt NOT NULL")]
		public long LeadId
		{
			get
			{
				return this._LeadId;
			}
			set
			{
				if ((this._LeadId != value))
				{
					if (this._Lead.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeadIdChanging(value);
					this.SendPropertyChanging();
					this._LeadId = value;
					this.SendPropertyChanged("LeadId");
					this.OnLeadIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Series", DbType="NVarChar(50)")]
		public string Series
		{
			get
			{
				return this._Series;
			}
			set
			{
				if ((this._Series != value))
				{
					this.OnSeriesChanging(value);
					this.SendPropertyChanging();
					this._Series = value;
					this.SendPropertyChanged("Series");
					this.OnSeriesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(50)")]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssuedBy", DbType="NVarChar(MAX)")]
		public string IssuedBy
		{
			get
			{
				return this._IssuedBy;
			}
			set
			{
				if ((this._IssuedBy != value))
				{
					this.OnIssuedByChanging(value);
					this.SendPropertyChanging();
					this._IssuedBy = value;
					this.SendPropertyChanged("IssuedBy");
					this.OnIssuedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueDate", DbType="Date NOT NULL")]
		public System.DateTime IssueDate
		{
			get
			{
				return this._IssueDate;
			}
			set
			{
				if ((this._IssueDate != value))
				{
					this.OnIssueDateChanging(value);
					this.SendPropertyChanging();
					this._IssueDate = value;
					this.SendPropertyChanged("IssueDate");
					this.OnIssueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivisionCode", DbType="NVarChar(MAX)")]
		public string DivisionCode
		{
			get
			{
				return this._DivisionCode;
			}
			set
			{
				if ((this._DivisionCode != value))
				{
					this.OnDivisionCodeChanging(value);
					this.SendPropertyChanging();
					this._DivisionCode = value;
					this.SendPropertyChanged("DivisionCode");
					this.OnDivisionCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lead_LeadPassportInfo", Storage="_Lead", ThisKey="LeadId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Lead Lead
		{
			get
			{
				return this._Lead.Entity;
			}
			set
			{
				Lead previousValue = this._Lead.Entity;
				if (((previousValue != value) 
							|| (this._Lead.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lead.Entity = null;
						previousValue.LeadPassportInfos = null;
					}
					this._Lead.Entity = value;
					if ((value != null))
					{
						value.LeadPassportInfos = this;
						this._LeadId = value.Id;
					}
					else
					{
						this._LeadId = default(long);
					}
					this.SendPropertyChanged("Lead");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Leads")]
	public partial class Lead : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _FirstName;
		
		private string _SurName;
		
		private string _LastName;
		
		private string _Email;
		
		private string _Phone;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private EntityRef<LeadAccountInfo> _LeadAccountInfos;
		
		private EntityRef<LeadLegalInfo> _LeadLegalInfos;
		
		private EntitySet<LeadOrder> _LeadOrders;
		
		private EntityRef<LeadPassportInfo> _LeadPassportInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnSurNameChanging(string value);
    partial void OnSurNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public Lead()
		{
			this._LeadAccountInfos = default(EntityRef<LeadAccountInfo>);
			this._LeadLegalInfos = default(EntityRef<LeadLegalInfo>);
			this._LeadOrders = new EntitySet<LeadOrder>(new Action<LeadOrder>(this.attach_LeadOrders), new Action<LeadOrder>(this.detach_LeadOrders));
			this._LeadPassportInfos = default(EntityRef<LeadPassportInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(255)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurName", DbType="NVarChar(255)")]
		public string SurName
		{
			get
			{
				return this._SurName;
			}
			set
			{
				if ((this._SurName != value))
				{
					this.OnSurNameChanging(value);
					this.SendPropertyChanging();
					this._SurName = value;
					this.SendPropertyChanged("SurName");
					this.OnSurNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(255)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(MAX)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(MAX)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lead_LeadAccountInfo", Storage="_LeadAccountInfos", ThisKey="Id", OtherKey="LeadId", IsUnique=true, IsForeignKey=false)]
		public LeadAccountInfo LeadAccountInfos
		{
			get
			{
				return this._LeadAccountInfos.Entity;
			}
			set
			{
				LeadAccountInfo previousValue = this._LeadAccountInfos.Entity;
				if (((previousValue != value) 
							|| (this._LeadAccountInfos.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeadAccountInfos.Entity = null;
						previousValue.Lead = null;
					}
					this._LeadAccountInfos.Entity = value;
					if ((value != null))
					{
						value.Lead = this;
					}
					this.SendPropertyChanged("LeadAccountInfos");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lead_LeadLegalInfo", Storage="_LeadLegalInfos", ThisKey="Id", OtherKey="LeadId", IsUnique=true, IsForeignKey=false)]
		public LeadLegalInfo LeadLegalInfos
		{
			get
			{
				return this._LeadLegalInfos.Entity;
			}
			set
			{
				LeadLegalInfo previousValue = this._LeadLegalInfos.Entity;
				if (((previousValue != value) 
							|| (this._LeadLegalInfos.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeadLegalInfos.Entity = null;
						previousValue.Lead = null;
					}
					this._LeadLegalInfos.Entity = value;
					if ((value != null))
					{
						value.Lead = this;
					}
					this.SendPropertyChanged("LeadLegalInfos");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lead_LeadOrder", Storage="_LeadOrders", ThisKey="Id", OtherKey="LeadId")]
		public EntitySet<LeadOrder> LeadOrders
		{
			get
			{
				return this._LeadOrders;
			}
			set
			{
				this._LeadOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lead_LeadPassportInfo", Storage="_LeadPassportInfos", ThisKey="Id", OtherKey="LeadId", IsUnique=true, IsForeignKey=false)]
		public LeadPassportInfo LeadPassportInfos
		{
			get
			{
				return this._LeadPassportInfos.Entity;
			}
			set
			{
				LeadPassportInfo previousValue = this._LeadPassportInfos.Entity;
				if (((previousValue != value) 
							|| (this._LeadPassportInfos.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeadPassportInfos.Entity = null;
						previousValue.Lead = null;
					}
					this._LeadPassportInfos.Entity = value;
					if ((value != null))
					{
						value.Lead = this;
					}
					this.SendPropertyChanged("LeadPassportInfos");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LeadOrders(LeadOrder entity)
		{
			this.SendPropertyChanging();
			entity.Lead = this;
		}
		
		private void detach_LeadOrders(LeadOrder entity)
		{
			this.SendPropertyChanging();
			entity.Lead = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Permissions")]
	public partial class Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Name;
		
		private string _Group;
		
		private EntitySet<RolePermission> _RolePermissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGroupChanging(string value);
    partial void OnGroupChanged();
    #endregion
		
		public Permission()
		{
			this._RolePermissions = new EntitySet<RolePermission>(new Action<RolePermission>(this.attach_RolePermissions), new Action<RolePermission>(this.detach_RolePermissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Group]", Storage="_Group", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Group
		{
			get
			{
				return this._Group;
			}
			set
			{
				if ((this._Group != value))
				{
					this.OnGroupChanging(value);
					this.SendPropertyChanging();
					this._Group = value;
					this.SendPropertyChanged("Group");
					this.OnGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_RolePermission", Storage="_RolePermissions", ThisKey="Id", OtherKey="PermissionId")]
		public EntitySet<RolePermission> RolePermissions
		{
			get
			{
				return this._RolePermissions;
			}
			set
			{
				this._RolePermissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RolePermissions(RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = this;
		}
		
		private void detach_RolePermissions(RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductTypes")]
	public partial class ProductType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _ProjectId;
		
		private string _Article;
		
		private string _Title;
		
		private string _Description;
		
		private string _Photo;
		
		private System.Nullable<decimal> _Weight;
		
		private System.Nullable<int> _MinAmount;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private System.Nullable<System.DateTime> _DateModified;
		
		private EntitySet<FEAOrderItem> _FEAOrderItems;
		
		private EntitySet<LeadOrderItem> _LeadOrderItems;
		
		private EntitySet<WarehouseProduct> _WarehouseProducts;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnProjectIdChanging(long value);
    partial void OnProjectIdChanged();
    partial void OnArticleChanging(string value);
    partial void OnArticleChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPhotoChanging(string value);
    partial void OnPhotoChanged();
    partial void OnWeightChanging(System.Nullable<decimal> value);
    partial void OnWeightChanged();
    partial void OnMinAmountChanging(System.Nullable<int> value);
    partial void OnMinAmountChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public ProductType()
		{
			this._FEAOrderItems = new EntitySet<FEAOrderItem>(new Action<FEAOrderItem>(this.attach_FEAOrderItems), new Action<FEAOrderItem>(this.detach_FEAOrderItems));
			this._LeadOrderItems = new EntitySet<LeadOrderItem>(new Action<LeadOrderItem>(this.attach_LeadOrderItems), new Action<LeadOrderItem>(this.detach_LeadOrderItems));
			this._WarehouseProducts = new EntitySet<WarehouseProduct>(new Action<WarehouseProduct>(this.attach_WarehouseProducts), new Action<WarehouseProduct>(this.detach_WarehouseProducts));
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="BigInt NOT NULL")]
		public long ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Article", DbType="NVarChar(50)")]
		public string Article
		{
			get
			{
				return this._Article;
			}
			set
			{
				if ((this._Article != value))
				{
					this.OnArticleChanging(value);
					this.SendPropertyChanging();
					this._Article = value;
					this.SendPropertyChanged("Article");
					this.OnArticleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(255)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="NVarChar(MAX)")]
		public string Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Money")]
		public System.Nullable<decimal> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinAmount", DbType="Int")]
		public System.Nullable<int> MinAmount
		{
			get
			{
				return this._MinAmount;
			}
			set
			{
				if ((this._MinAmount != value))
				{
					this.OnMinAmountChanging(value);
					this.SendPropertyChanging();
					this._MinAmount = value;
					this.SendPropertyChanged("MinAmount");
					this.OnMinAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductType_FEAOrderItem", Storage="_FEAOrderItems", ThisKey="Id", OtherKey="ProductId")]
		public EntitySet<FEAOrderItem> FEAOrderItems
		{
			get
			{
				return this._FEAOrderItems;
			}
			set
			{
				this._FEAOrderItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductType_LeadOrderItem", Storage="_LeadOrderItems", ThisKey="Id", OtherKey="ProductId")]
		public EntitySet<LeadOrderItem> LeadOrderItems
		{
			get
			{
				return this._LeadOrderItems;
			}
			set
			{
				this._LeadOrderItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductType_WarehouseProduct", Storage="_WarehouseProducts", ThisKey="Id", OtherKey="ProductId")]
		public EntitySet<WarehouseProduct> WarehouseProducts
		{
			get
			{
				return this._WarehouseProducts;
			}
			set
			{
				this._WarehouseProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProductType", Storage="_Project", ThisKey="ProjectId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProductTypes.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProductTypes.Add(this);
						this._ProjectId = value.Id;
					}
					else
					{
						this._ProjectId = default(long);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FEAOrderItems(FEAOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.ProductType = this;
		}
		
		private void detach_FEAOrderItems(FEAOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.ProductType = null;
		}
		
		private void attach_LeadOrderItems(LeadOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.ProductType = this;
		}
		
		private void detach_LeadOrderItems(LeadOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.ProductType = null;
		}
		
		private void attach_WarehouseProducts(WarehouseProduct entity)
		{
			this.SendPropertyChanging();
			entity.ProductType = this;
		}
		
		private void detach_WarehouseProducts(WarehouseProduct entity)
		{
			this.SendPropertyChanging();
			entity.ProductType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Projects")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Title;
		
		private string _Description;
		
		private string _Url;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private System.Nullable<System.DateTime> _DateModified;
		
		private EntitySet<LeadOrder> _LeadOrders;
		
		private EntitySet<ProductType> _ProductTypes;
		
		private EntitySet<ProjectUser> _ProjectUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public Project()
		{
			this._LeadOrders = new EntitySet<LeadOrder>(new Action<LeadOrder>(this.attach_LeadOrders), new Action<LeadOrder>(this.detach_LeadOrders));
			this._ProductTypes = new EntitySet<ProductType>(new Action<ProductType>(this.attach_ProductTypes), new Action<ProductType>(this.detach_ProductTypes));
			this._ProjectUsers = new EntitySet<ProjectUser>(new Action<ProjectUser>(this.attach_ProjectUsers), new Action<ProjectUser>(this.detach_ProjectUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(MAX)")]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_LeadOrder", Storage="_LeadOrders", ThisKey="Id", OtherKey="ProjectId")]
		public EntitySet<LeadOrder> LeadOrders
		{
			get
			{
				return this._LeadOrders;
			}
			set
			{
				this._LeadOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProductType", Storage="_ProductTypes", ThisKey="Id", OtherKey="ProjectId")]
		public EntitySet<ProductType> ProductTypes
		{
			get
			{
				return this._ProductTypes;
			}
			set
			{
				this._ProductTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectUser", Storage="_ProjectUsers", ThisKey="Id", OtherKey="ProjectId")]
		public EntitySet<ProjectUser> ProjectUsers
		{
			get
			{
				return this._ProjectUsers;
			}
			set
			{
				this._ProjectUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LeadOrders(LeadOrder entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_LeadOrders(LeadOrder entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_ProductTypes(ProductType entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProductTypes(ProductType entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_ProjectUsers(ProjectUser entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjectUsers(ProjectUser entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectUsers")]
	public partial class ProjectUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _UserId;
		
		private long _ProjectId;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(long value);
    partial void OnUserIdChanged();
    partial void OnProjectIdChanging(long value);
    partial void OnProjectIdChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public ProjectUser()
		{
			this._Project = default(EntityRef<Project>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="BigInt NOT NULL")]
		public long UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="BigInt NOT NULL")]
		public long ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectUser", Storage="_Project", ThisKey="ProjectId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectUsers.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectUsers.Add(this);
						this._ProjectId = value.Id;
					}
					else
					{
						this._ProjectId = default(long);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ProjectUser", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ProjectUsers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ProjectUsers.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RolePermissions")]
	public partial class RolePermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _RoleId;
		
		private long _PermissionId;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private EntityRef<Permission> _Permission;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnRoleIdChanging(long value);
    partial void OnRoleIdChanged();
    partial void OnPermissionIdChanging(long value);
    partial void OnPermissionIdChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public RolePermission()
		{
			this._Permission = default(EntityRef<Permission>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="BigInt NOT NULL")]
		public long RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionId", DbType="BigInt NOT NULL")]
		public long PermissionId
		{
			get
			{
				return this._PermissionId;
			}
			set
			{
				if ((this._PermissionId != value))
				{
					if (this._Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermissionIdChanging(value);
					this.SendPropertyChanging();
					this._PermissionId = value;
					this.SendPropertyChanged("PermissionId");
					this.OnPermissionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_RolePermission", Storage="_Permission", ThisKey="PermissionId", OtherKey="Id", IsForeignKey=true)]
		public Permission Permission
		{
			get
			{
				return this._Permission.Entity;
			}
			set
			{
				Permission previousValue = this._Permission.Entity;
				if (((previousValue != value) 
							|| (this._Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission.Entity = null;
						previousValue.RolePermissions.Remove(this);
					}
					this._Permission.Entity = value;
					if ((value != null))
					{
						value.RolePermissions.Add(this);
						this._PermissionId = value.Id;
					}
					else
					{
						this._PermissionId = default(long);
					}
					this.SendPropertyChanged("Permission");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RolePermission", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.RolePermissions.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.RolePermissions.Add(this);
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(long);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Name;
		
		private string _DisplayName;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private System.Nullable<System.DateTime> _DateModified;
		
		private EntitySet<RolePermission> _RolePermissions;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public Role()
		{
			this._RolePermissions = new EntitySet<RolePermission>(new Action<RolePermission>(this.attach_RolePermissions), new Action<RolePermission>(this.detach_RolePermissions));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(255)")]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RolePermission", Storage="_RolePermissions", ThisKey="Id", OtherKey="RoleId")]
		public EntitySet<RolePermission> RolePermissions
		{
			get
			{
				return this._RolePermissions;
			}
			set
			{
				this._RolePermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Users", ThisKey="Id", OtherKey="RoleId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RolePermissions(RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_RolePermissions(RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Email;
		
		private string _PasswordHash;
		
		private long _RoleId;
		
		private string _FirstName;
		
		private string _SurName;
		
		private string _LastName;
		
		private string _Phone;
		
		private string _City;
		
		private string _Address;
		
		private short _Status;
		
		private string _Photo;
		
		private System.Nullable<System.DateTime> _DateRegistred;
		
		private System.Nullable<System.DateTime> _LastLogin;
		
		private EntitySet<FEAOrdersStatusChangement> _FEAOrdersStatusChangements;
		
		private EntitySet<LeadOrderDocument> _LeadOrderDocuments;
		
		private EntitySet<LeadOrdersComment> _LeadOrdersComments;
		
		private EntitySet<LeadOrderStatusChangement> _LeadOrderStatusChangements;
		
		private EntitySet<ProjectUser> _ProjectUsers;
		
		private EntitySet<WarehouseKeeper> _WarehouseKeepers;
		
		private EntitySet<LeadOrderUser> _LeadOrderUsers;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnRoleIdChanging(long value);
    partial void OnRoleIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnSurNameChanging(string value);
    partial void OnSurNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnStatusChanging(short value);
    partial void OnStatusChanged();
    partial void OnPhotoChanging(string value);
    partial void OnPhotoChanged();
    partial void OnDateRegistredChanging(System.Nullable<System.DateTime> value);
    partial void OnDateRegistredChanged();
    partial void OnLastLoginChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLoginChanged();
    #endregion
		
		public User()
		{
			this._FEAOrdersStatusChangements = new EntitySet<FEAOrdersStatusChangement>(new Action<FEAOrdersStatusChangement>(this.attach_FEAOrdersStatusChangements), new Action<FEAOrdersStatusChangement>(this.detach_FEAOrdersStatusChangements));
			this._LeadOrderDocuments = new EntitySet<LeadOrderDocument>(new Action<LeadOrderDocument>(this.attach_LeadOrderDocuments), new Action<LeadOrderDocument>(this.detach_LeadOrderDocuments));
			this._LeadOrdersComments = new EntitySet<LeadOrdersComment>(new Action<LeadOrdersComment>(this.attach_LeadOrdersComments), new Action<LeadOrdersComment>(this.detach_LeadOrdersComments));
			this._LeadOrderStatusChangements = new EntitySet<LeadOrderStatusChangement>(new Action<LeadOrderStatusChangement>(this.attach_LeadOrderStatusChangements), new Action<LeadOrderStatusChangement>(this.detach_LeadOrderStatusChangements));
			this._ProjectUsers = new EntitySet<ProjectUser>(new Action<ProjectUser>(this.attach_ProjectUsers), new Action<ProjectUser>(this.detach_ProjectUsers));
			this._WarehouseKeepers = new EntitySet<WarehouseKeeper>(new Action<WarehouseKeeper>(this.attach_WarehouseKeepers), new Action<WarehouseKeeper>(this.detach_WarehouseKeepers));
			this._LeadOrderUsers = new EntitySet<LeadOrderUser>(new Action<LeadOrderUser>(this.attach_LeadOrderUsers), new Action<LeadOrderUser>(this.detach_LeadOrderUsers));
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="NVarChar(MAX)")]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="BigInt NOT NULL")]
		public long RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(255)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurName", DbType="NVarChar(255)")]
		public string SurName
		{
			get
			{
				return this._SurName;
			}
			set
			{
				if ((this._SurName != value))
				{
					this.OnSurNameChanging(value);
					this.SendPropertyChanging();
					this._SurName = value;
					this.SendPropertyChanged("SurName");
					this.OnSurNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(255)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(255)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(255)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="SmallInt NOT NULL")]
		public short Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="NVarChar(MAX)")]
		public string Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateRegistred", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateRegistred
		{
			get
			{
				return this._DateRegistred;
			}
			set
			{
				if ((this._DateRegistred != value))
				{
					this.OnDateRegistredChanging(value);
					this.SendPropertyChanging();
					this._DateRegistred = value;
					this.SendPropertyChanged("DateRegistred");
					this.OnDateRegistredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLogin", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastLogin
		{
			get
			{
				return this._LastLogin;
			}
			set
			{
				if ((this._LastLogin != value))
				{
					this.OnLastLoginChanging(value);
					this.SendPropertyChanging();
					this._LastLogin = value;
					this.SendPropertyChanged("LastLogin");
					this.OnLastLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_FEAOrdersStatusChangement", Storage="_FEAOrdersStatusChangements", ThisKey="Id", OtherKey="AuthorId")]
		public EntitySet<FEAOrdersStatusChangement> FEAOrdersStatusChangements
		{
			get
			{
				return this._FEAOrdersStatusChangements;
			}
			set
			{
				this._FEAOrdersStatusChangements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LeadOrderDocument", Storage="_LeadOrderDocuments", ThisKey="Id", OtherKey="UploadedBy")]
		public EntitySet<LeadOrderDocument> LeadOrderDocuments
		{
			get
			{
				return this._LeadOrderDocuments;
			}
			set
			{
				this._LeadOrderDocuments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LeadOrdersComment", Storage="_LeadOrdersComments", ThisKey="Id", OtherKey="OrderId")]
		public EntitySet<LeadOrdersComment> LeadOrdersComments
		{
			get
			{
				return this._LeadOrdersComments;
			}
			set
			{
				this._LeadOrdersComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LeadOrderStatusChangement", Storage="_LeadOrderStatusChangements", ThisKey="Id", OtherKey="AuthorId")]
		public EntitySet<LeadOrderStatusChangement> LeadOrderStatusChangements
		{
			get
			{
				return this._LeadOrderStatusChangements;
			}
			set
			{
				this._LeadOrderStatusChangements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ProjectUser", Storage="_ProjectUsers", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<ProjectUser> ProjectUsers
		{
			get
			{
				return this._ProjectUsers;
			}
			set
			{
				this._ProjectUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_WarehouseKeeper", Storage="_WarehouseKeepers", ThisKey="Id", OtherKey="WarehouseId")]
		public EntitySet<WarehouseKeeper> WarehouseKeepers
		{
			get
			{
				return this._WarehouseKeepers;
			}
			set
			{
				this._WarehouseKeepers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LeadOrderUser", Storage="_LeadOrderUsers", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<LeadOrderUser> LeadOrderUsers
		{
			get
			{
				return this._LeadOrderUsers;
			}
			set
			{
				this._LeadOrderUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(long);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FEAOrdersStatusChangements(FEAOrdersStatusChangement entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_FEAOrdersStatusChangements(FEAOrdersStatusChangement entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_LeadOrderDocuments(LeadOrderDocument entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_LeadOrderDocuments(LeadOrderDocument entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_LeadOrdersComments(LeadOrdersComment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_LeadOrdersComments(LeadOrdersComment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_LeadOrderStatusChangements(LeadOrderStatusChangement entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_LeadOrderStatusChangements(LeadOrderStatusChangement entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ProjectUsers(ProjectUser entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ProjectUsers(ProjectUser entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_WarehouseKeepers(WarehouseKeeper entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_WarehouseKeepers(WarehouseKeeper entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_LeadOrderUsers(LeadOrderUser entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_LeadOrderUsers(LeadOrderUser entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WarehouseKeepers")]
	public partial class WarehouseKeeper : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _UserId;
		
		private long _WarehouseId;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private EntityRef<User> _User;
		
		private EntityRef<Warehouse> _Warehouse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(long value);
    partial void OnUserIdChanged();
    partial void OnWarehouseIdChanging(long value);
    partial void OnWarehouseIdChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public WarehouseKeeper()
		{
			this._User = default(EntityRef<User>);
			this._Warehouse = default(EntityRef<Warehouse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="BigInt NOT NULL")]
		public long UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarehouseId", DbType="BigInt NOT NULL")]
		public long WarehouseId
		{
			get
			{
				return this._WarehouseId;
			}
			set
			{
				if ((this._WarehouseId != value))
				{
					if ((this._User.HasLoadedOrAssignedValue || this._Warehouse.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWarehouseIdChanging(value);
					this.SendPropertyChanging();
					this._WarehouseId = value;
					this.SendPropertyChanged("WarehouseId");
					this.OnWarehouseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_WarehouseKeeper", Storage="_User", ThisKey="WarehouseId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.WarehouseKeepers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.WarehouseKeepers.Add(this);
						this._WarehouseId = value.Id;
					}
					else
					{
						this._WarehouseId = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Warehouse_WarehouseKeeper", Storage="_Warehouse", ThisKey="WarehouseId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Warehouse Warehouse
		{
			get
			{
				return this._Warehouse.Entity;
			}
			set
			{
				Warehouse previousValue = this._Warehouse.Entity;
				if (((previousValue != value) 
							|| (this._Warehouse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Warehouse.Entity = null;
						previousValue.WarehouseKeepers.Remove(this);
					}
					this._Warehouse.Entity = value;
					if ((value != null))
					{
						value.WarehouseKeepers.Add(this);
						this._WarehouseId = value.Id;
					}
					else
					{
						this._WarehouseId = default(long);
					}
					this.SendPropertyChanged("Warehouse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WarehouseProducts")]
	public partial class WarehouseProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _ProductId;
		
		private long _WarehouseId;
		
		private decimal _Price;
		
		private int _Quantity;
		
		private string _DeliveryTime;
		
		private string _OrderTime;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private System.Nullable<System.DateTime> _DateModified;
		
		private EntityRef<ProductType> _ProductType;
		
		private EntityRef<Warehouse> _Warehouse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnProductIdChanging(long value);
    partial void OnProductIdChanged();
    partial void OnWarehouseIdChanging(long value);
    partial void OnWarehouseIdChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnDeliveryTimeChanging(string value);
    partial void OnDeliveryTimeChanged();
    partial void OnOrderTimeChanging(string value);
    partial void OnOrderTimeChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public WarehouseProduct()
		{
			this._ProductType = default(EntityRef<ProductType>);
			this._Warehouse = default(EntityRef<Warehouse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="BigInt NOT NULL")]
		public long ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._ProductType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarehouseId", DbType="BigInt NOT NULL")]
		public long WarehouseId
		{
			get
			{
				return this._WarehouseId;
			}
			set
			{
				if ((this._WarehouseId != value))
				{
					if (this._Warehouse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWarehouseIdChanging(value);
					this.SendPropertyChanging();
					this._WarehouseId = value;
					this.SendPropertyChanged("WarehouseId");
					this.OnWarehouseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryTime", DbType="NVarChar(255)")]
		public string DeliveryTime
		{
			get
			{
				return this._DeliveryTime;
			}
			set
			{
				if ((this._DeliveryTime != value))
				{
					this.OnDeliveryTimeChanging(value);
					this.SendPropertyChanging();
					this._DeliveryTime = value;
					this.SendPropertyChanged("DeliveryTime");
					this.OnDeliveryTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderTime", DbType="NVarChar(255)")]
		public string OrderTime
		{
			get
			{
				return this._OrderTime;
			}
			set
			{
				if ((this._OrderTime != value))
				{
					this.OnOrderTimeChanging(value);
					this.SendPropertyChanging();
					this._OrderTime = value;
					this.SendPropertyChanged("OrderTime");
					this.OnOrderTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductType_WarehouseProduct", Storage="_ProductType", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
		public ProductType ProductType
		{
			get
			{
				return this._ProductType.Entity;
			}
			set
			{
				ProductType previousValue = this._ProductType.Entity;
				if (((previousValue != value) 
							|| (this._ProductType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductType.Entity = null;
						previousValue.WarehouseProducts.Remove(this);
					}
					this._ProductType.Entity = value;
					if ((value != null))
					{
						value.WarehouseProducts.Add(this);
						this._ProductId = value.Id;
					}
					else
					{
						this._ProductId = default(long);
					}
					this.SendPropertyChanged("ProductType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Warehouse_WarehouseProduct", Storage="_Warehouse", ThisKey="WarehouseId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Warehouse Warehouse
		{
			get
			{
				return this._Warehouse.Entity;
			}
			set
			{
				Warehouse previousValue = this._Warehouse.Entity;
				if (((previousValue != value) 
							|| (this._Warehouse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Warehouse.Entity = null;
						previousValue.WarehouseProducts.Remove(this);
					}
					this._Warehouse.Entity = value;
					if ((value != null))
					{
						value.WarehouseProducts.Add(this);
						this._WarehouseId = value.Id;
					}
					else
					{
						this._WarehouseId = default(long);
					}
					this.SendPropertyChanged("Warehouse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LeadOrderUsers")]
	public partial class LeadOrderUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _OrderId;
		
		private long _UserId;
		
		private short _OrderRole;
		
		private EntityRef<LeadOrder> _LeadOrder;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnOrderIdChanging(long value);
    partial void OnOrderIdChanged();
    partial void OnUserIdChanging(long value);
    partial void OnUserIdChanged();
    partial void OnOrderRoleChanging(short value);
    partial void OnOrderRoleChanged();
    #endregion
		
		public LeadOrderUser()
		{
			this._LeadOrder = default(EntityRef<LeadOrder>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="BigInt NOT NULL")]
		public long OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					if (this._LeadOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="BigInt NOT NULL")]
		public long UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderRole", DbType="SmallInt NOT NULL")]
		public short OrderRole
		{
			get
			{
				return this._OrderRole;
			}
			set
			{
				if ((this._OrderRole != value))
				{
					this.OnOrderRoleChanging(value);
					this.SendPropertyChanging();
					this._OrderRole = value;
					this.SendPropertyChanged("OrderRole");
					this.OnOrderRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeadOrder_LeadOrderUser", Storage="_LeadOrder", ThisKey="OrderId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LeadOrder LeadOrder
		{
			get
			{
				return this._LeadOrder.Entity;
			}
			set
			{
				LeadOrder previousValue = this._LeadOrder.Entity;
				if (((previousValue != value) 
							|| (this._LeadOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeadOrder.Entity = null;
						previousValue.LeadOrderUsers.Remove(this);
					}
					this._LeadOrder.Entity = value;
					if ((value != null))
					{
						value.LeadOrderUsers.Add(this);
						this._OrderId = value.Id;
					}
					else
					{
						this._OrderId = default(long);
					}
					this.SendPropertyChanged("LeadOrder");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LeadOrderUser", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.LeadOrderUsers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.LeadOrderUsers.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SMSNotificationMessages")]
	public partial class SMSNotificationMessage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Recipient;
		
		private string _Message;
		
		private bool _Sended;
		
		private System.Nullable<System.DateTime> _DateEnqueued;
		
		private System.Nullable<System.DateTime> _DateSended;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnRecipientChanging(string value);
    partial void OnRecipientChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnSendedChanging(bool value);
    partial void OnSendedChanged();
    partial void OnDateEnqueuedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateEnqueuedChanged();
    partial void OnDateSendedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateSendedChanged();
    #endregion
		
		public SMSNotificationMessage()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recipient", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Recipient
		{
			get
			{
				return this._Recipient;
			}
			set
			{
				if ((this._Recipient != value))
				{
					this.OnRecipientChanging(value);
					this.SendPropertyChanging();
					this._Recipient = value;
					this.SendPropertyChanged("Recipient");
					this.OnRecipientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sended", DbType="Bit NOT NULL")]
		public bool Sended
		{
			get
			{
				return this._Sended;
			}
			set
			{
				if ((this._Sended != value))
				{
					this.OnSendedChanging(value);
					this.SendPropertyChanging();
					this._Sended = value;
					this.SendPropertyChanged("Sended");
					this.OnSendedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEnqueued", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateEnqueued
		{
			get
			{
				return this._DateEnqueued;
			}
			set
			{
				if ((this._DateEnqueued != value))
				{
					this.OnDateEnqueuedChanging(value);
					this.SendPropertyChanging();
					this._DateEnqueued = value;
					this.SendPropertyChanged("DateEnqueued");
					this.OnDateEnqueuedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateSended", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateSended
		{
			get
			{
				return this._DateSended;
			}
			set
			{
				if ((this._DateSended != value))
				{
					this.OnDateSendedChanging(value);
					this.SendPropertyChanging();
					this._DateSended = value;
					this.SendPropertyChanged("DateSended");
					this.OnDateSendedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MailNotificationMessages")]
	public partial class MailNotificationMessage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Recipient;
		
		private string _Subject;
		
		private string _Content;
		
		private bool _Sended;
		
		private System.Nullable<System.DateTime> _DateEnqued;
		
		private System.Nullable<System.DateTime> _DateSended;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnRecipientChanging(string value);
    partial void OnRecipientChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnSendedChanging(bool value);
    partial void OnSendedChanged();
    partial void OnDateEnquedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateEnquedChanged();
    partial void OnDateSendedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateSendedChanged();
    #endregion
		
		public MailNotificationMessage()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recipient", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Recipient
		{
			get
			{
				return this._Recipient;
			}
			set
			{
				if ((this._Recipient != value))
				{
					this.OnRecipientChanging(value);
					this.SendPropertyChanging();
					this._Recipient = value;
					this.SendPropertyChanged("Recipient");
					this.OnRecipientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NVarChar(255)")]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sended", DbType="Bit NOT NULL")]
		public bool Sended
		{
			get
			{
				return this._Sended;
			}
			set
			{
				if ((this._Sended != value))
				{
					this.OnSendedChanging(value);
					this.SendPropertyChanging();
					this._Sended = value;
					this.SendPropertyChanged("Sended");
					this.OnSendedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEnqued", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateEnqued
		{
			get
			{
				return this._DateEnqued;
			}
			set
			{
				if ((this._DateEnqued != value))
				{
					this.OnDateEnquedChanging(value);
					this.SendPropertyChanging();
					this._DateEnqued = value;
					this.SendPropertyChanged("DateEnqued");
					this.OnDateEnquedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateSended", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateSended
		{
			get
			{
				return this._DateSended;
			}
			set
			{
				if ((this._DateSended != value))
				{
					this.OnDateSendedChanging(value);
					this.SendPropertyChanging();
					this._DateSended = value;
					this.SendPropertyChanged("DateSended");
					this.OnDateSendedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
